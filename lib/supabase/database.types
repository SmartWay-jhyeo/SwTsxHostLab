export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]

export interface Database {
  public: {
    Tables: {
      analysis_results: {
        Row: {
          id: number
          created_at: string
          title: string
          description: string | null
          location: string | null
          data: Json
          room_count: number
          password: string | null
          client_name: string | null
          user_id: string | null
        }
        Insert: {
          id?: number
          created_at?: string
          title: string
          description?: string | null
          location?: string | null
          data: Json
          room_count?: number
          password?: string | null
          client_name?: string | null
          user_id?: string | null
        }
        Update: {
          id?: number
          created_at?: string
          title?: string
          description?: string | null
          location?: string | null
          data?: Json
          room_count?: number
          password?: string | null
          client_name?: string | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "analysis_results_user_id_fkey"
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      consultation_notes: {
        Row: {
          id: number
          created_at: string
          updated_at: string
          content: string
          analysis_id: number | null
          user_id: string | null
        }
        Insert: {
          id?: number
          created_at?: string
          updated_at?: string
          content: string
          analysis_id?: number | null
          user_id?: string | null
        }
        Update: {
          id?: number
          created_at?: string
          updated_at?: string
          content?: string
          analysis_id?: number | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "consultation_notes_analysis_id_fkey"
            columns: ["analysis_id"]
            referencedRelation: "analysis_results"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "consultation_notes_user_id_fkey"
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      profiles: {
        Row: {
          id: string
          role: string | null
          created_at: string | null
          updated_at: string | null
        }
        Insert: {
          id: string
          role?: string | null
          created_at?: string | null
          updated_at?: string | null
        }
        Update: {
          id?: string
          role?: string | null
          created_at?: string | null
          updated_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "profiles_id_fkey"
            columns: ["id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (Database["public"]["Tables"] & {[_: string]: never})
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName]
  : never

export type Table<
  TableName extends keyof Database["public"]["Tables"]
> = Database["public"]["Tables"][TableName]
